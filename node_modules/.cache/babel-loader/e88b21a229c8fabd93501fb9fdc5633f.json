{"ast":null,"code":"var _jsxFileName = \"/Users/moose/github/afats.github.io/src/components/Projects/Projects.js\";\nimport uniqid from 'uniqid';\nimport { projects } from '../../portfolio';\nimport ProjectContainer from '../ProjectContainer/ProjectContainer';\nimport './Projects.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction shuffle(array) {\n  let currentIndex = array.length,\n      randomIndex; // While there remain elements to shuffle.\n\n  while (currentIndex != 0) {\n    // Pick a remaining element.\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex--; // And swap it with the current element.\n\n    [array[currentIndex], array[randomIndex]] = [array[randomIndex], array[currentIndex]];\n  }\n\n  return array;\n}\n\nprojects = shuffle(projects);\n\nconst Projects = () => {\n  if (!projects.length) return null;\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    id: \"projects\",\n    className: \"section projects\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"section__title\",\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"electric__blue\",\n        children: \"Projects\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 38\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"projects__grid\",\n      children: projects.map(project => /*#__PURE__*/_jsxDEV(ProjectContainer, {\n        project: projects\n      }, uniqid(), false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n};\n\n_c = Projects;\nexport default Projects;\n\nvar _c;\n\n$RefreshReg$(_c, \"Projects\");","map":{"version":3,"sources":["/Users/moose/github/afats.github.io/src/components/Projects/Projects.js"],"names":["uniqid","projects","ProjectContainer","shuffle","array","currentIndex","length","randomIndex","Math","floor","random","Projects","map","project"],"mappings":";AAAA,OAAOA,MAAP,MAAmB,QAAnB;AACA,SAASC,QAAT,QAAyB,iBAAzB;AACA,OAAOC,gBAAP,MAA6B,sCAA7B;AACA,OAAO,gBAAP;;;AAGA,SAASC,OAAT,CAAiBC,KAAjB,EAAwB;AACtB,MAAIC,YAAY,GAAGD,KAAK,CAACE,MAAzB;AAAA,MAAkCC,WAAlC,CADsB,CAGtB;;AACA,SAAOF,YAAY,IAAI,CAAvB,EAA0B;AAExB;AACAE,IAAAA,WAAW,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBL,YAA3B,CAAd;AACAA,IAAAA,YAAY,GAJY,CAMxB;;AACA,KAACD,KAAK,CAACC,YAAD,CAAN,EAAsBD,KAAK,CAACG,WAAD,CAA3B,IAA4C,CAC1CH,KAAK,CAACG,WAAD,CADqC,EACtBH,KAAK,CAACC,YAAD,CADiB,CAA5C;AAED;;AAED,SAAOD,KAAP;AACD;;AAEDH,QAAQ,GAAGE,OAAO,CAACF,QAAD,CAAlB;;AAEA,MAAMU,QAAQ,GAAG,MAAM;AACrB,MAAI,CAACV,QAAQ,CAACK,MAAd,EAAsB,OAAO,IAAP;AAEtB,sBACE;AAAS,IAAA,EAAE,EAAC,UAAZ;AAAuB,IAAA,SAAS,EAAC,kBAAjC;AAAA,4BACE;AAAI,MAAA,SAAS,EAAC,gBAAd;AAAA,6BAA+B;AAAM,QAAA,SAAS,EAAC,gBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA/B;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAK,MAAA,SAAS,EAAC,gBAAf;AAAA,gBACGL,QAAQ,CAACW,GAAT,CAAcC,OAAD,iBACZ,QAAC,gBAAD;AAAiC,QAAA,OAAO,EAAEZ;AAA1C,SAAuBD,MAAM,EAA7B;AAAA;AAAA;AAAA;AAAA,cADD;AADH;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAUD,CAbD;;KAAMW,Q;AAeN,eAAeA,QAAf","sourcesContent":["import uniqid from 'uniqid'\nimport { projects } from '../../portfolio'\nimport ProjectContainer from '../ProjectContainer/ProjectContainer'\nimport './Projects.css'\n\n\nfunction shuffle(array) {\n  let currentIndex = array.length,  randomIndex;\n\n  // While there remain elements to shuffle.\n  while (currentIndex != 0) {\n\n    // Pick a remaining element.\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex--;\n\n    // And swap it with the current element.\n    [array[currentIndex], array[randomIndex]] = [\n      array[randomIndex], array[currentIndex]];\n  }\n\n  return array;\n}\n\nprojects = shuffle(projects);\n\nconst Projects = () => {\n  if (!projects.length) return null\n\n  return (\n    <section id='projects' className='section projects'>\n      <h2 className='section__title'><span className='electric__blue'>Projects</span></h2>\n      <div className='projects__grid'>\n        {projects.map((project) => (\n          <ProjectContainer key={uniqid()} project={projects} />\n        ))}\n      </div>\n    </section>\n  )\n}\n\nexport default Projects\n"]},"metadata":{},"sourceType":"module"}